version: "3"

services:
  security_tool_metasploit:
    image: metasploitframework/metasploit-framework
    container_name: security_tool_metasploit
    ports:
      - "8081:8081"
      - "55552:55552"
      - "55553:55553"
    depends_on:
      - security_tool_metasploit_postgres
    # networks:
    #   - metasploit
    networks:
      - app-network
    command:
      - /bin/bash
      - -c
      - |
        bundle exec thin --rackup msf-json-rpc.ru --address 0.0.0.0 --port 8081 --environment production --tag msf-json-rpc start &
        ruby ./msfrpcd -U user -P pass -f

  security_tool_metasploit_postgres:
    image: postgres
    container_name: security_tool_metasploit_postgres
    environment:
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    # networks:
    #   - metasploit
    networks:
      - app-network

  vulnerability-tests:
    image: greenbone/vulnerability-tests
    environment:
      STORAGE_PATH: /var/lib/openvas/22.04/vt-data/nasl
    volumes:
      - vt_data_vol:/mnt
    networks:
      - app-network

  notus-data:
    image: greenbone/notus-data
    volumes:
      - notus_data_vol:/mnt
    networks:
      - app-network

  scap-data:
    image: greenbone/scap-data
    volumes:
      - scap_data_vol:/mnt
    networks:
      - app-network

  cert-bund-data:
    image: greenbone/cert-bund-data
    volumes:
      - cert_data_vol:/mnt
    networks:
      - app-network

  dfn-cert-data:
    image: greenbone/dfn-cert-data
    volumes:
      - cert_data_vol:/mnt
    depends_on:
      - cert-bund-data
    networks:
      - app-network

  data-objects:
    image: greenbone/data-objects
    volumes:
      - data_objects_vol:/mnt
    networks:
      - app-network

  report-formats:
    image: greenbone/report-formats
    volumes:
      - data_objects_vol:/mnt
    depends_on:
      - data-objects
    networks:
      - app-network

  gpg-data:
    image: greenbone/gpg-data
    volumes:
      - gpg_data_vol:/mntx
    networks:
      - app-network

  redis-server:
    image: greenbone/redis-server
    restart: on-failure
    volumes:
      - redis_socket_vol:/run/redis/
    networks:
      - app-network

  pg-gvm:
    image: greenbone/pg-gvm:stable
    restart: on-failure
    volumes:
      - psql_data_vol:/var/lib/postgresql
      - psql_socket_vol:/var/run/postgresql
    networks:
      - app-network

  gvmd:
    image: greenbone/gvmd:stable
    restart: on-failure
    volumes:
      - gvmd_data_vol:/var/lib/gvm
      - scap_data_vol:/var/lib/gvm/scap-data/
      - cert_data_vol:/var/lib/gvm/cert-data
      - data_objects_vol:/var/lib/gvm/data-objects/gvmd
      - vt_data_vol:/var/lib/openvas/plugins
      - psql_data_vol:/var/lib/postgresql
      - ../security_tool_volume/openvas_socket:/run/gvmd
      - ospd_openvas_socket_vol:/run/ospd
      - psql_socket_vol:/var/run/postgresql
    depends_on:
      pg-gvm:
        condition: service_started
      scap-data:
        condition: service_completed_successfully
      cert-bund-data:
        condition: service_completed_successfully
      dfn-cert-data:
        condition: service_completed_successfully
      data-objects:
        condition: service_completed_successfully
      report-formats:
        condition: service_completed_successfully
    networks:
      - app-network

  gsa:
    image: greenbone/gsa:stable
    restart: on-failure
    ports:
      - 9392:80
    volumes:
      - ../security_tool_volume/openvas_socket:/run/gvmd
    depends_on:
      - gvmd
    networks:
      - app-network

  ospd-openvas:
    image: greenbone/ospd-openvas:stable
    restart: on-failure
    init: true
    hostname: ospd-openvas.local
    cap_add:
      - NET_ADMIN 
      - NET_RAW 
    security_opt:
      - seccomp=unconfined
      - apparmor=unconfined
    command:
      [
        "ospd-openvas",
        "-f",
        "--config",
        "/etc/gvm/ospd-openvas.conf",
        "--mqtt-broker-address",
        "mqtt-broker",
        "--notus-feed-dir",
        "/var/lib/notus/advisories",
        "-m",
        "666",
      ]
    volumes:
      - gpg_data_vol:/etc/openvas/gnupg
      - vt_data_vol:/var/lib/openvas/plugins
      - notus_data_vol:/var/lib/notus
      - ospd_openvas_socket_vol:/run/ospd
      - redis_socket_vol:/run/redis/
    depends_on:
      redis-server:
        condition: service_started
      gpg-data:
        condition: service_completed_successfully
      vulnerability-tests:
        condition: service_completed_successfully
    networks:
      - app-network

  mqtt-broker:
    restart: on-failure
    image: greenbone/mqtt-broker
    ports:
      - 1883:1883
    # networks:
    #   default:
    #     aliases:
    #       - mqtt-broker
    #       - broker
    networks:
      - app-network

  notus-scanner:
    restart: on-failure
    image: greenbone/notus-scanner:stable
    volumes:
      - notus_data_vol:/var/lib/notus
      - gpg_data_vol:/etc/openvas/gnupg
    environment:
      NOTUS_SCANNER_MQTT_BROKER_ADDRESS: mqtt-broker
      NOTUS_SCANNER_PRODUCTS_DIRECTORY: /var/lib/notus/products
    depends_on:
      - mqtt-broker
      - gpg-data
      - vulnerability-tests
    networks:
      - app-network

  gvm-tools:
    image: greenbone/gvm-tools
    volumes:
      - gvmd_socket_vol:/run/gvmd
      - ospd_openvas_socket_vol:/run/ospd
    depends_on:
      - gvmd
      - ospd-openvas
    networks:
      - app-network

  security_tool_owaspzap_container:
    image: owasp/zap2docker-stable
    container_name: security_tool_owaspzap_container
    volumes:
      - $(pwd)/security_tool_volume/OWASPZAP:/home/zap
    ports:
      - "8005:8005"
    networks:
      - app-network
    command: ["zap-x.sh", "-daemon", "-host", "0.0.0.0", "-port", "8005", "-config", "api.addrs.addr.name=.*", "-config", "api.addrs.addr.regex=true", "-config", "api.key=1234"]
    
  
  security_tool_container:
    build:
      context: ./zplus-engine-develop/runtime-env/docker-containers-setup
      dockerfile: Dockerfile-Tools
    container_name: security_tool_container
    ports:
      - "8004:22"
      - "8775:8775"
    volumes:
      - $(pwd)/security_tool_volume:/security_tool_volume
    networks:
      - app-network
   
networks:
  app-network: